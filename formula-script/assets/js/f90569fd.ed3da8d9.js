"use strict";(self.webpackChunkformula_script=self.webpackChunkformula_script||[]).push([[428],{6755:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>a});var r=n(4848),i=n(8453);const s={sidebar_position:2},l="Magic Functions",c={id:"functions/magic-functions",title:"Magic Functions",description:"Magic functions gives Formula-Script a lot of flexibility since it allows you to change the way mathematical-logical operations work.",source:"@site/docs/functions/magic-functions.md",sourceDirName:"functions",slug:"/functions/magic-functions",permalink:"/formula-script/docs/functions/magic-functions",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Built-in functions",permalink:"/formula-script/docs/functions/"},next:{title:"Async Functions",permalink:"/formula-script/docs/functions/async-functions"}},o={},a=[{value:"Difference with normal functions",id:"difference-with-normal-functions",level:3},{value:"Characteristics",id:"characteristics",level:3},{value:"Let&#39;s build your first magic function",id:"lets-build-your-first-magic-function",level:3},{value:"Why do we need to define two functions for the same operation if (&#39;hello world&#39; * 4) is equal to (4 * &#39;hello world&#39;)? Can&#39;t FS assume they are the same?",id:"why-do-we-need-to-define-two-functions-for-the-same-operation-if-hello-world--4-is-equal-to-4--hello-world-cant-fs-assume-they-are-the-same",level:4},{value:"Example number two",id:"example-number-two",level:3},{value:"Example:",id:"example",level:4}];function d(e){const t={code:"code",h1:"h1",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"magic-functions",children:"Magic Functions"}),"\n",(0,r.jsx)(t.p,{children:"Magic functions gives Formula-Script a lot of flexibility since it allows you to change the way mathematical-logical operations work."}),"\n",(0,r.jsx)(t.h3,{id:"difference-with-normal-functions",children:"Difference with normal functions"}),"\n",(0,r.jsx)(t.p,{children:"Magic functions cannot be directly called with an identifier, they are called with mathematical-logical operators."}),"\n",(0,r.jsxs)(t.p,{children:["Let's say that you perform this simple operation: ",(0,r.jsx)(t.code,{children:"1 + 2"}),".\nIn order to solve that addition, FS calls the magic function ",(0,r.jsx)(t.code,{children:"_NUMBER_ADD_NUMBER(1, 2)"})," or when you have this: ",(0,r.jsx)(t.code,{children:"'text' + 10"})," FS calls the function ",(0,r.jsx)(t.code,{children:"_STRING_ADD_NUMBER('text', 10)"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"The good thing is that you can replace/create magic functions in order to give operations a different behavior."}),"\n",(0,r.jsx)(t.h3,{id:"characteristics",children:"Characteristics"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Magic functions start with an underscore _."}),"\n",(0,r.jsxs)(t.li,{children:["They ",(0,r.jsx)(t.strong,{children:"always"})," have two parameters."]}),"\n",(0,r.jsx)(t.li,{children:"They follow this syntax:"}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"_"})," + ",(0,r.jsx)(t.code,{children:"LEFT DATATYPE"})," + ",(0,r.jsx)(t.code,{children:"_OPERATOR_"})," + ",(0,r.jsx)(t.code,{children:"RIGHT DATATYPE"})]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"center"},children:"DataType"}),(0,r.jsx)(t.th,{style:{textAlign:"center"},children:"Keyword"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"string"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"STRING"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"boolean"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"BOOL"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"date"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"DATE"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"range"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"RANGE"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"number"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"NUMBER"})]})]})]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"center"},children:"Operator"}),(0,r.jsx)(t.th,{style:{textAlign:"center"},children:"Keyword"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"="}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"EQ"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"!="}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"EQ"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:">"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"GT"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:">="}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"GTE"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"<"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"LT"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"<="}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"LTE"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"+"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"ADD"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"-"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"SUB"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"*"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"MUL"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"/"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"DIV"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"^"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"POW"})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"lets-build-your-first-magic-function",children:"Let's build your first magic function"}),"\n",(0,r.jsx)(t.p,{children:"By default FS doesn't support multiplication between a string and a number but we can give that operation a meaning.\nOur operation looks like this:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"const fs = new FormulaScript();\nfs.run(\"'hello world!' * 4\") // By now we have an error\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Let's see what would be our magic functions' keyword. It must start with an underscore, so: ",(0,r.jsx)(t.code,{children:"_"}),", then it must continue with the datatype we have at the left: ",(0,r.jsx)(t.code,{children:"_STRING"}),". Followed by that, we have to set the operand: ",(0,r.jsx)(t.code,{children:"_MUL_"})," and at the end, the right datatype.\nFinal result: ",(0,r.jsx)(t.code,{children:"_STRING_MUL_NUMBER"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"const fs = new FormulaScript();\nfs.registry.register('_STRING_MUL_NUMBER', {\n    call(args) {\n        const leftSide = args.asString(0);\n        const rightSide = args.asNumber(1);\n        let finalResult = \"\";\n        for (let i = 0; i < rightSide; i++) {\n            finalResult += leftSide;\n        }\n        return finalResult;\n    },\n    numParams: 2 //Can't be a different number!!!\n});\nconsole.log(i.run(\"'hello world!' * 4\")) //hello world!hello world!hello world!hello world!\n"})}),"\n",(0,r.jsx)(t.p,{children:"Now, when we multiply a string by a number FS repeats the string as many times as the number indicates."}),"\n",(0,r.jsxs)(t.p,{children:["But we haven't finished yet. What happens if we do ",(0,r.jsx)(t.code,{children:"4 * 'hello world!'"}),"?\nWe'll have an error because we haven't defined what happens when the number is at the left side and the string at the right side, so:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"const fs = new FormulaScript();\n                  //Notice the keyword now\nfs.registry.register('_NUMBER_MUL_STRING', {\n    call(args) {\n        const numberArg = args.asNumber(0); //Now we first have the number\n        const stringToRepeat = args.asString(1);\n        let finalResult = \"\";\n        for (let i = 0; i < stringToRepeat; i++) {\n            finalResult += numberArg;\n        }\n        return finalResult;\n    },\n    numParams: 2\n});\nconsole.log(i.run(\"4 * 'hello world!'\")) //hello world!hello world!hello world!hello world!\n"})}),"\n",(0,r.jsx)(t.h4,{id:"why-do-we-need-to-define-two-functions-for-the-same-operation-if-hello-world--4-is-equal-to-4--hello-world-cant-fs-assume-they-are-the-same",children:"Why do we need to define two functions for the same operation if ('hello world' * 4) is equal to (4 * 'hello world')? Can't FS assume they are the same?"}),"\n",(0,r.jsx)(t.p,{children:"Not all operators and not all data types can be commutable unlike this example. In some mathematical-logical operations, the order of operands and their data types can affect the outcome.\nIt will be clearer on the following example."}),"\n",(0,r.jsx)(t.h3,{id:"example-number-two",children:"Example number two"}),"\n",(0,r.jsx)(t.p,{children:"Let's create a magic function that can divide a range by a number. This function must perform a division by a scalar. It must return a range but with each of its components divided by that number."}),"\n",(0,r.jsx)(t.h4,{id:"example",children:"Example:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"A1:A3 = [1, 2, 3]\n\nA1:A3 / 2 => [1/2, 1, 3/2]\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:'const fs = new FormulaScript();\nfs.registry.register("_RANGE_DIV_NUMBER", {\n    call(args) {\n        const range = args.asRange(0);\n        const number = args.asNumber(1);\n        let result = [];\n        for (let i = 0; i < range.length; i++) {\n            const element = range.asNumber(i);\n            result.push(element / number);\n        }\n        return result;\n    },\n    numParams: 2\n});\n\nconsole.log(i.run("A1:A3 / 2")) // [0.5, 1, 1.5]\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Does it make sense to divide a number by a range? In math that operation is not defined so it's ok if we don't define ",(0,r.jsx)(t.code,{children:"_NUMBER_DIV_RANGE"})," and let FS throw an error when that happens."]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>c});var r=n(6540);const i={},s=r.createContext(i);function l(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);