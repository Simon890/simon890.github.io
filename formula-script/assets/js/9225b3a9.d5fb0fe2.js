"use strict";(self.webpackChunkformula_script=self.webpackChunkformula_script||[]).push([[950],{3309:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>d});var s=i(4848),r=i(8453);const t={sidebar_position:3},l="Configuration",o={id:"config",title:"Configuration",description:"You can change the interpreter's behavior by passing an object to `FormulaScript` class.",source:"@site/docs/config.md",sourceDirName:".",slug:"/config",permalink:"/formula-script/docs/config",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Async Functions",permalink:"/formula-script/docs/functions/async-functions"},next:{title:"Limitations",permalink:"/formula-script/docs/limitations"}},c={},d=[{value:"Properties",id:"properties",level:3},{value:"isCaseSensitive",id:"iscasesensitive",level:3},{value:"useDateLiteral",id:"usedateliteral",level:3},{value:"How does FS know if 2024/06/02 is a date literal or a division?",id:"how-does-fs-know-if-20240602-is-a-date-literal-or-a-division",level:4},{value:"Examples:",id:"examples",level:4}];function a(e){const n={code:"code",h1:"h1",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["You can change the interpreter's behavior by passing an object to ",(0,s.jsx)(n.code,{children:"FormulaScript"})," class."]}),"\n",(0,s.jsx)(n.h3,{id:"properties",children:"Properties"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"isCaseSensitive"}),": Difference between capital and lower-case letters. Default value: ",(0,s.jsx)(n.code,{children:"true"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"useLiteralDate"}),": Allows the use of literal dates. Default value: ",(0,s.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { FormulaScript } from "formula-script"\n\nconst fs = new FormulaScript({\n    isCaseSensitive: true,\n    useLiteralDate: false\n});\n'})}),"\n",(0,s.jsx)(n.h3,{id:"iscasesensitive",children:"isCaseSensitive"}),"\n",(0,s.jsxs)(n.p,{children:["When this property is ",(0,s.jsx)(n.code,{children:"true"})," then, the difference between capital and lower-case letters is important."]}),"\n",(0,s.jsxs)(n.p,{children:["Case-sensitiveness only affects ",(0,s.jsx)(n.strong,{children:"functions' names"})," and ",(0,s.jsx)(n.strong,{children:"boolean literals"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { FormulaScript } from "formula-script"\n\nconst fs = new FormulaScript();\nfs.registry.register("MYFUNCTION", {\n    exec() {\n        //...\n    }\n});\n\nconsole.log(fs.run("myfunction()")) // ERROR! \'myfunction\' does not exist\nconsole.log(fs.run("MYFUNCTION()")) // Function exists :)\n'})}),"\n",(0,s.jsx)(n.p,{children:"The only way to use boolean literals is uppercase:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"TRUE"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"FALSE"})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["When this property is ",(0,s.jsx)(n.code,{children:"false"})," then, there is no difference between capital and lower-case characters ",(0,s.jsx)(n.strong,{children:"only for function's names and boolean literals"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { FormulaScript } from "formula-script"\n\nconst fs = new FormulaScript();\nfs.registry.register("MyFunction", {\n    exec() {\n        //...\n    }\n});\n\nconsole.log(fs.run("myfunction()")) // Function exists :)\nconsole.log(fs.run("MYFUNCTION()")) // Function exists :)\nconsole.log(fs.run("mYfUnCtIoN()")) // Function exists :)\n'})}),"\n",(0,s.jsx)(n.p,{children:"Boolean literals:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"TRUE"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"true"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"tRuE"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"FALSE"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"false"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"FaLsE"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"usedateliteral",children:"useDateLiteral"}),"\n",(0,s.jsx)(n.p,{children:"A date literal refers to a specific way of representing a date in a programming language. It's a way of defining a date directly in the code by using a specific format that the interpreter can recognize and convert into a valid date object."}),"\n",(0,s.jsxs)(n.p,{children:["The format supported by Formula-Script is: ",(0,s.jsx)(n.code,{children:"YYYY/MM/DD"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'fs.run("2024/06/02") //This is a date literal\n'})}),"\n",(0,s.jsx)(n.h4,{id:"how-does-fs-know-if-20240602-is-a-date-literal-or-a-division",children:"How does FS know if 2024/06/02 is a date literal or a division?"}),"\n",(0,s.jsxs)(n.p,{children:["When an expression with this format ",(0,s.jsx)(n.code,{children:"YYYY/MM/DD"})," is found, FS checks if it's a valid date, if that's the case, then that's treated as a date literal, else it's treated as a division between three numbers."]}),"\n",(0,s.jsx)(n.h4,{id:"examples",children:"Examples:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"2024/07/01"}),": Date literal"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"2024/07/1"}),": 2024 divided by 07 divided by 1"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"2024/7/01"}),": 2024 divided by 7 divided by 01"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"2024/07/99"}),": 2024 divided by 07 divided by 99"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"20245/07/01"}),": 20245 divided by 07 divided by 01"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"2024/50/01"}),": 2024 divided by 50 divided by 01"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"2024 / 50 / 01"}),": 2024 divided by 50 divided by 01"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"2024/ 50/01"}),": 2024 divided by 50 divided by 01"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["If this property is set to ",(0,s.jsx)(n.code,{children:"false"})," then ",(0,s.jsx)(n.code,{children:"YYYY/MM/DD"})," will always be treated as a division between three numbers and the only way to declare dates would be ",(0,s.jsx)(n.code,{children:"DATE(YYYY, MM, DD)"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>o});var s=i(6540);const r={},t=s.createContext(r);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);