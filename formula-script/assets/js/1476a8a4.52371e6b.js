"use strict";(self.webpackChunkformula_script=self.webpackChunkformula_script||[]).push([[671],{751:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var i=n(4848),o=n(8453);const s={sidebar_position:4},r="Limitations",a={id:"limitations",title:"Limitations",description:"Formula-Script tries to replicate the formula you know from Excel, yet there are some differences:",source:"@site/docs/limitations.md",sourceDirName:".",slug:"/limitations",permalink:"/formula-script/docs/limitations",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Demo",permalink:"/formula-script/docs/demo"},next:{title:"Magic Functions",permalink:"/formula-script/docs/magic-functions"}},c={},l=[];function u(e){const t={a:"a",code:"code",em:"em",h1:"h1",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"limitations",children:"Limitations"}),"\n",(0,i.jsx)(t.p,{children:"Formula-Script tries to replicate the formula you know from Excel, yet there are some differences:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Date"}),": FS internally uses ",(0,i.jsx)(t.em,{children:"dayjs"})," library. It doesn't use serial Excel number. So, for example, when you are checking if two dates are the same it can return FALSE because of a difference of milliseconds while in Excel it returns TRUE. However, if you wish to change the way this comparison works you can do it by using ",(0,i.jsx)(t.a,{href:"/docs/magic-functions",children:"Magic Functions"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Literal Dates"}),": At the moment it is not possible to use dates with this syntax: ",(0,i.jsx)(t.code,{children:"05/06/2024"})," because I've been struggling to parse that because I don't know how to differentiate that date format from a division operation when I'm building the Abstract Syntax Tree. If you want to help, feel free to create a pull request or contact me via LinkedIn or Github. At the moment, the only way to use dates is by using the function ",(0,i.jsx)(t.code,{children:"DATE(2024, 06, 05)"})," or any other function that returns a date for example ",(0,i.jsx)(t.code,{children:"TODAY()"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Binary Expression with power operand"}),": By now it is not possible to power a number with this syntax: ",(0,i.jsx)(t.code,{children:"2 ^ 5"})," but I'll work on it as soon as possible. You can power a number by using the function ",(0,i.jsx)(t.code,{children:"POW(2, 5)"})]}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var i=n(6540);const o={},s=i.createContext(o);function r(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);