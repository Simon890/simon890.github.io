"use strict";(self.webpackChunkformula_script=self.webpackChunkformula_script||[]).push([[265],{1047:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>i,toc:()=>o});var r=s(4848),l=s(8453);const t={sidebar_position:2},a="Data types",i={id:"tutorial-basics/data-types",title:"Data types",description:"Data types define the type of values that can be manipulated by Formula-Script.",source:"@site/docs/tutorial-basics/data-types.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/data-types",permalink:"/formula-script/docs/tutorial-basics/data-types",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Create a Function",permalink:"/formula-script/docs/tutorial-basics/create-a-function"},next:{title:"Functions",permalink:"/formula-script/docs/category/functions"}},c={},o=[{value:"Valid data types",id:"valid-data-types",level:3},{value:"Range - A special data type",id:"range---a-special-data-type",level:3},{value:"Examples",id:"examples",level:4},{value:"How to enable ranges?",id:"how-to-enable-ranges",level:3},{value:"Cell reference",id:"cell-reference",level:3}];function d(e){const n={code:"code",em:"em",h1:"h1",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"data-types",children:"Data types"}),"\n",(0,r.jsx)(n.p,{children:"Data types define the type of values that can be manipulated by Formula-Script."}),"\n",(0,r.jsx)(n.h3,{id:"valid-data-types",children:"Valid data types"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"String"}),": Represents a sequence of characters. It can be between single or multiple quotes."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"fs.run(`CONCAT('First String', \"Second String\")`);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Number"}),": Represents a number. It can have a fractional part."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"fs.run(`AVG(10, 15.5, .3, -5)`);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Boolean"}),": Represents truth values. You can use explicit values as ",(0,r.jsx)(n.em,{children:"TRUE"})," or ",(0,r.jsx)(n.em,{children:"FALSE"})," but can also use boolean comparisons."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"console.log(fs.run(`TRUE`)); //true\nconsole.log(fs.run(`FALSE`)); //false\nconsole.log(fs.run('5 > 5')); //false\nconsole.log(fs.run('5 >= 5')); //true\nconsole.log(fs.run('8 < 7')); //false\nconsole.log(fs.run('8 <= 7')); //false\nconsole.log(fs.run('5 != 3')); //true\nconsole.log(fs.run('10 = 10')); //true\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Date"}),": Represents a date. You can use the DATE function"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'fs.run("DATE(2024, 05, 02)") // 2024-05-02 => year-month-day\n'})}),"\n",(0,r.jsx)(n.p,{children:"or a date literal"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'fs.run("2024/05/02") // 2024-05-02 => year-month-day\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Range"}),": Represents a set of values."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"fs.run(`AVGRANGE(A1:B5)`);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"range---a-special-data-type",children:"Range - A special data type"}),"\n",(0,r.jsx)(n.p,{children:"A range refers to a collection of cells that have been selected or defined by reference. Ranges are a fundamental part in spreadsheet languages.\nIn Formula-Script, ranges are composed of three parts:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"The left side: Points to the beginning cell."}),"\n",(0,r.jsx)(n.li,{children:"The colon (:) as a separator"}),"\n",(0,r.jsx)(n.li,{children:"The right side: Points to the final cell."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"leftSide"})," + ",(0,r.jsx)(n.em,{children:":"})," + ",(0,r.jsx)(n.em,{children:"rightSide"})]}),"\n",(0,r.jsx)(n.h4,{id:"examples",children:"Examples"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A1",":B5"]}),"\n",(0,r.jsxs)(n.li,{children:["MyFirstCell",":MyLastCell"]}),"\n",(0,r.jsxs)(n.li,{children:["C10",":F100"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"how-to-enable-ranges",children:"How to enable ranges?"}),"\n",(0,r.jsx)(n.p,{children:"By default Formula-Script doesn't allow you to use ranges unless you define a range handler.\nWhy? Because FS doesn't know where to get the data from."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import {FormulaScript} from \"formula-script\"\n\nconst fs = new FormulaScript();\nfs.run(`SUMRANGE(A1:B5)`); //throws an error: No range handler has been set. Use 'setRangeHandler' to set your handler.\n"})}),"\n",(0,r.jsx)(n.p,{children:"To fix this, you just have to define your handler with the 'setRangeHandler' function"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import {FormulaScript} from "formula-script"\n\nconst dataSource = [\n//          A  B   C           D\n/* 1 */    [1, 2,  3,     \'a string\'],\n/* 2 */    [5, 7,  false,          8],\n/* 3 */    [9, 10, 11,          true],\n];\n\nconst fs = new FormulaScript();\nfs.setRangeHandler((left : string, right : string, fail : Function) : Range => {\n  if(left.length > 2 || right.length > 2) fail(\'Invalid range value\'); //Throw an error if range is incorrect\n\n  const colLeft = left[0];\n  const rowLeft = Number(left[1]);\n  const colRight = right[0];\n  const rowRight = Number(right[1]);\n  const cell2index = {\n    "A": 0,\n    "B": 1,\n    "C": 2,\n    "D": 3\n  }\n  const result = [];\n  for(let i = cell2index[colLeft]; i <= cell2index[colRight]; i++) {\n    for(let j = rowLeft - 1; j <= rowRight - 1; j++) {\n      const element = dataSource[j][i];\n      result.push(element);\n    }\n  }\n  return result;\n});\nfs.run(`SUMRANGE(A1:B3)`); //34\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The function ",(0,r.jsx)(n.em,{children:"setRangeHandler"})," accepts a callback function as a parameter. This callback function has three parameters:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"left"}),"\n",(0,r.jsx)(n.li,{children:"right"}),"\n",(0,r.jsx)(n.li,{children:"fail"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This callback function must return a one dimension array. This array can only contain valid data types."}),"\n",(0,r.jsx)(n.h3,{id:"cell-reference",children:"Cell reference"}),"\n",(0,r.jsx)(n.p,{children:"Cell references work similar to ranges. By default you cannot use it unless you define a cell reference handler.\nYou can set a handler with the 'setCellRefHandler' function."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import {FormulaScript} from "formula-script"\n\nconst dataSource = [\n//          A  B   C           D\n/* 1 */    [1, 2,  3,     \'a string\'],\n/* 2 */    [5, 7,  false,          8],\n/* 3 */    [9, 10, 11,          true],\n];\n\nconst fs = new FormulaScript();\nfs.setCellRefHandler((cellName : string, fail : Function) => {\n  if(cellName.length > 2) fail(\'Invalid cell reference\');\n  const col = cellName[0];\n  const rowIndex = Number(cellName[1]);\n  const cell2index = {\n    "A": 0,\n    "B": 1,\n    "C": 2,\n    "D": 3\n  }\n  if(!(col in cell2index) || rowIndex > 2) fail(\'Cell reference does not exist\');\n  return dataSource[rowIndex][cell2index[col]];\n});\n'})})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>i});var r=s(6540);const l={},t=r.createContext(l);function a(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);